{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/dialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","DialogItem","className","classes","dialogue","active","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","dialog","messagesElements","messages","dialogsItems","values","sendMessage","newMessageBody","compose","actions"],"mappings":"wMAKIA,EAA6B,SAACC,GAAD,MAA0B,CAC1DC,OAAQD,EAAME,KAAKD,SAEb,SAASE,EAAsBC,GAOrC,OADqCC,YAA4DN,EAA4B,GAAxFM,EALiC,SAACC,GAAW,IAC3EL,EAAyBK,EAAzBL,OAAWM,EAD+D,YACjDD,EADiD,YAEhF,OAAKL,EACE,cAACG,EAAD,eAAsBG,IADT,cAAC,IAAD,CAAUC,GAAG,gB,oBCVnCC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,SAAW,4B,oBCAnLD,EAAOC,QAAU,CAAC,QAAU,2B,uJCWbC,EARyB,SAACL,GACrC,OACI,qBAAKM,UAAWC,IAAQC,SAAW,IAAMD,IAAQE,OAAjD,SACI,cAAC,IAAD,CAASP,GAAI,aAAeF,EAAMU,GAAlC,SAAuCV,EAAMW,U,kBCK1CC,EARsB,SAACZ,GAClC,OACI,qBAAKM,UAAWC,IAAQM,QAAxB,SACKb,EAAMa,WC4BbC,EAAcC,YAAiB,IAW/BC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAV4C,SAACjB,GACrE,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACKC,YAAsC,qBAAsB,iBAAkBC,IAAU,CAACC,IAAUT,IACpG,8BACI,kDAMDU,EApCyB,SAACxB,GACrC,IAAIN,EAAQM,EAAMyB,YAEdC,EAAkBhC,EAAMiC,QACvBC,KAAI,SAACC,GAAD,OAAgB,cAAC,EAAD,CAAYlB,KAAMkB,EAAOlB,KAAsBD,GAAImB,EAAOnB,IAAtBmB,EAAOnB,OAEhEoB,EAAmBpC,EAAMqC,SACxBH,KAAI,SAACf,GAAD,OAAiB,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQH,OAK1E,OACI,sBAAKJ,UAAWC,IAAQoB,QAAxB,UACI,qBAAKrB,UAAWC,IAAQyB,aAAxB,SACKN,IAEL,sBAAKpB,UAAWC,IAAQwB,SAAxB,UACI,8BAAMD,IACN,cAACd,EAAD,CAAqBG,SAVb,SAACc,GACvBjC,EAAMkC,YAAYD,EAAOE,0BCRZC,sBACdrC,aANqB,SAACL,GACtB,MAAO,CACN+B,YAAa/B,EAAM+B,eAIb,eAAqBY,MAC5BxC,IAFcuC,CAGbZ","file":"static/js/4.eb24e7e8.chunk.js","sourcesContent":["import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { appStateType } from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: appStateType) => ({\r\n\tisAuth: state.auth.isAuth\r\n});\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\tconst RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\t\tlet { isAuth, ...restProps } = props\r\n\t\tif (!isAuth) return <Redirect to='/Login' />\r\n\t\treturn <WrappedComponent {...restProps as WCP} />\r\n\t}\r\n\tlet ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, appStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\treturn ConnectedAuthRedirectComponent;\r\n}\r\n//types\r\ntype MapPropsType = {\r\n\tisAuth: boolean\r\n}\r\ntype DispatchPropsType = {}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3gkBh\",\"dialogsItems\":\"Dialogs_dialogsItems__3tQCj\",\"active\":\"Dialogs_active__3p29K\",\"dialogue\":\"Dialogs_dialogue__1nXcS\",\"messages\":\"Dialogs_messages__3U2tL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3PsDg\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css';\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={classes.dialogue + ' ' + classes.active}>\r\n            <NavLink to={\"/dialogue/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;\r\n//types \r\ntype PropsType = {\r\n    id: number,\r\n    name: string\r\n}","import React from 'react';\r\nimport classes from './Message.module.css'\r\n\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n//types\r\ntype PropsType = {\r\n    message: string\r\n}","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { initialStateType } from '../../redux/dialogsReducer';\r\n\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { createField, Textarea } from '../common/formsControls/formsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map((dialog:any) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\r\n\r\n    let messagesElements = state.messages\r\n        .map((message:any) => <Message message={message.message} key={message.id} />);\r\n    \r\n    let addNewMessage = (values: NewMessageFormType) => {\r\n\t\tprops.sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType>> = (props:any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<NewMessageFormValuesType>('Enter your message', \"newMessageBody\", Textarea, [required, maxLength50])} \r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\nexport default Dialogs;\r\n//types\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: initialStateType,\r\n    sendMessage: (messageText: string) => void,\r\n}\r\nexport type NewMessageFormType= {\r\n    newMessageBody: string,    \r\n}\r\ntype NewMessageFormValuesType = Extract<keyof NewMessageFormType, string>","\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions} from '../../redux/dialogsReducer';\r\nimport { appStateType } from '../../redux/reduxStore';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage\r\n\t}\r\n}\r\nexport default compose(\r\n\tconnect(mapStateToProps,{...actions}),\r\n\twithAuthRedirect\r\n)(Dialogs) as React.ComponentType"],"sourceRoot":""}