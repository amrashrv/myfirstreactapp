{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Myposts/Myposts.module.css","components/Profile/Myposts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/Myposts.tsx","components/Profile/Myposts/mypostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/profileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","Post","className","classes","item","alt","src","message","likesCount","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","post","newpost","values","addPost","newPostBody","myposts","MyPostsContainer","profilePage","actions","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataReduxForm","profile","error","style","formSummaryError","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","description","profileInf","fullName","initialValues","formData","then","photos","large","userPhoto","target","files","length","Profile","backgroundBlock","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","Error","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.e90d2806.chunk.js","sourcesContent":["import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { appStateType } from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: appStateType) => ({\r\n\tisAuth: state.auth.isAuth\r\n});\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\tconst RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\t\tlet { isAuth, ...restProps } = props\r\n\t\tif (!isAuth) return <Redirect to='/Login' />\r\n\t\treturn <WrappedComponent {...restProps as WCP} />\r\n\t}\r\n\tlet ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, appStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\treturn ConnectedAuthRedirectComponent;\r\n}\r\n//types\r\ntype MapPropsType = {\r\n\tisAuth: boolean\r\n}\r\ntype DispatchPropsType = {}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__2j9jI\",\"profileInf\":\"ProfileInfo_profileInf__3MrON\",\"backgroundBlock\":\"ProfileInfo_backgroundBlock__1oEPT\",\"contact\":\"ProfileInfo_contact__dvbyO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Myposts_post__25rXP\",\"myposts\":\"Myposts_myposts__3fmiZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__V1oV6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Profile_description__I5HFT\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className={classes.item}>\r\n\t\t\t\t<img alt=\"avatar\" src=\"https://miro.medium.com/max/600/0*eIutoeUo8rPA13e0.jpg\" />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{props.message}\r\n\t\t\t\t</div>\r\n\t\t\t\t{props.likesCount} Likes\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\nexport default Post;\r\n//types \r\ntype PropsType = {\r\n\tmessage: string,\r\n\tlikesCount: number\r\n}","import React from 'react';\r\nimport {InjectedFormProps, reduxForm } from 'redux-form';\r\nimport classes from './Myposts.module.css';\r\nimport Post from './Post/Post';\r\nimport { required} from '../../../utils/validators/validators'\r\nimport { createField, GetStringKeys, Textarea } from '../../common/formsControls/formsControls';\r\nimport { postsType } from '../../../types/types';\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType> & PropsType> = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t{createField<AddPostFormValuesKyesType>(\"enter your post\",\"newPostBody\", Textarea, [required])}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button>Add post</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\nconst AddPostFormRedux = reduxForm<AddPostFormValuesType, PropsType>({ form: 'AddNewPostForm' })(AddPostForm);\r\nconst MyPosts: React.FC<MyPostsPropsType & DispatchPropsType> = React.memo(props => {\r\n\r\n\tlet postsElements = [...props.posts]\r\n\t\t.reverse()\r\n\t\t.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n\tconst addNewPost = (values: AddPostFormValuesType) => {\r\n\t\tprops.addPost(values.newPostBody);\r\n\t};\r\n\r\n\treturn <div className={classes.post}>\r\n\t\t<div className={classes.newpost}>\r\n\t\t\t<AddPostFormRedux onSubmit={addNewPost} />\r\n\t\t</div>\r\n\t\t<div className={classes.myposts}>\r\n\t\t\t{postsElements}\r\n\t\t</div>\r\n\t</div>;\r\n});\r\n\r\nexport default MyPosts;\r\n//types\r\ntype PropsType = {}\r\n\r\nexport type MyPostsPropsType = {\r\n\tposts: Array<postsType>\r\n}\r\nexport type DispatchPropsType = {\r\n\taddPost: (newPostBody: string) => void\r\n}\r\ntype AddPostFormValuesKyesType = GetStringKeys<AddPostFormValuesType>\r\ntype AddPostFormValuesType = {\r\n\tnewPostBody: string\r\n}\r\n","\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profileReducer';\r\nimport { appStateType } from '../../../redux/reduxStore';\r\nimport MyPosts, { DispatchPropsType, MyPostsPropsType } from './Myposts';\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect<MyPostsPropsType, DispatchPropsType, {}, appStateType>(mapStateToProps,{addPost: actions.addPostActionCreator})(MyPosts);\r\nexport default MyPostsContainer;","import React, { ChangeEvent, useEffect, useState } from 'react';\r\ntype PropsType = {\r\n\tstatus: string,\r\n\tupdateStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [status, setStatus] = useState(props.status);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status)\r\n\t}, [props.status]);\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\tconst deactivateEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tprops.updateStatus(status);\r\n\t}\r\n\tconst onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetStatus(e.currentTarget.value); \r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{!editMode &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{editMode &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status} />\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>)\r\n}\r\n\t\t\r\n\r\nexport default ProfileStatusWithHooks;","import classes from './ProfileInfo.module.css';\r\nimport React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, GetStringKeys, Input, Textarea } from '../../common/formsControls/formsControls';\r\nimport style from '../../common/formsControls/formsControls.module.css'\r\nimport { profileType } from '../../../types/types';\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<profileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<button>Save</button>\r\n\t\t\t</div>\r\n\t\t\t\t{error && <div className={style.formSummaryError}>{error}</div>}\r\n\t\t\t<div>\r\n\t\t\t\t<b>Full name:</b> {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", Input, [])}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>Looking for a job:</b> {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", Input, [], {type: \"checkbox\"})}\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<b>My professional skills:</b> {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [])}\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div>\r\n\t\t\t\t<b>About me:</b> {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", Textarea, [])}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n\t\t\t\t\treturn <div key={key} className={classes.contact}>\r\n\t\t\t\t\t\t{/*to do: create some solution for emvedded objects */}\r\n\t\t\t\t\t\t<b>{key}: {createField(key, 'contacts.' + key, Input, [])}</b>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t})} \r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\nconst ProfileDataReduxForm = reduxForm<profileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm;\r\n//types \r\ntype PropsType = {\r\n\tprofile: profileType\r\n};\r\ntype ProfileTypeKeys = GetStringKeys<profileType>;","import React, { ChangeEvent, useState } from 'react';\r\nimport Preloader from '../../common/preloader/preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/images.png';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\nimport { contactsType, profileType } from '../../../types/types';\r\n\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, updateStatus, status, isOwner, savePhoto, saveProfile }) => {\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tif (!profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\t\r\n\tconst onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files?.length) {\r\n\t\t\tsavePhoto(e.target.files[0]);\r\n\t\t}\r\n\t}\r\n\r\n\tconst onSubmit = (formData: profileType ) => {\r\n\t\t//todo: re\r\n\t\tsaveProfile(formData).then(() => {\r\n\t\t\tsetEditMode(false);\r\n\t\t});\r\n\t}\r\n\treturn (\r\n\t\t<div className={classes.description}>\r\n\t\t\t<div className={classes.profileInf}>\r\n\t\t\t\t<h1>{profile.fullName}</h1>\r\n\t\t\t\t<ProfileStatusWithHooks\r\n\t\t\t\t\tstatus={status}\r\n\t\t\t\t\tupdateStatus={updateStatus} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{editMode\r\n\t\t\t\t\t\t? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n\t\t\t\t\t\t: <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t<img alt=\"img\" src={profile.photos.large || userPhoto} />\r\n\t\t\t{ isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}></input>}\r\n\t\t</div >\r\n\t)\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t{isOwner && <button onClick={goToEditMode}>Add info</button>}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n\t\t\t</div>\r\n\t\t\t{profile.lookingForAJob &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div>\r\n\t\t\t\t<b>About me:</b> {profile.aboutMe}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n\t\t\t\t\treturn <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof contactsType]} />\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>)\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n\treturn <div className={classes.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n///types \r\ntype PropsType = {\r\n\tprofile: profileType | null,\r\n\tupdateStatus:(status: string)=> void ,\r\n\tstatus: string,\r\n\tisOwner: boolean,\r\n\tsavePhoto: (file: File) => void,\r\n\tsaveProfile: (profile: profileType) => Promise<any>\r\n}\r\ntype ProfileDataPropsType = {\r\n\tprofile: profileType,\r\n\tisOwner: boolean,\r\n\tgoToEditMode: () => void\r\n}\r\ntype ContactsPropsType = { \r\n\tcontactTitle: string, \r\n\tcontactValue: string\r\n}","import React from 'react';\r\nimport { profileType } from '../../types/types';\r\nimport MyPostsContainer from './Myposts/mypostsContainer';\r\nimport classes from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\t\r\n\treturn (\r\n\t\t\r\n\t\t<div className={classes.backgroundBlock}>\r\n\t\t\t<ProfileInfo\r\n\t\t\t\tsaveProfile={props.saveProfile}\r\n\t\t\t\tsavePhoto={props.savePhoto}\r\n\t\t\t\tisOwner={props.isOwner}\r\n\t\t\t\tprofile={props.profile}\r\n\t\t\t\tstatus={props.status}\r\n\t\t\t\tupdateStatus={props.updateStatus} />\r\n\t\t\t<MyPostsContainer />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Profile;\r\n//types \r\ntype PropsType = {\r\n\tsaveProfile: (profile: profileType) => Promise<any>,\r\n\tsavePhoto: (file: File) => void,\r\n\tisOwner: boolean,\r\n\tprofile: profileType | null,\r\n\tstatus: string,\r\n\tupdateStatus: (status: string) => void\r\n\r\n}","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from '../../redux/profileReducer';\r\nimport { appStateType } from '../../redux/reduxStore';\r\nimport { profileType } from '../../types/types';\r\nimport Profile from './Profile';\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\tconstructor(props: PropsType) {\r\n\t\tsuper(props);\r\n\t}\r\n\trefreshProfile(){\r\n\t\tlet userId: number | null = +this.props.match.params.userId;\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId;\r\n\t\t\tif (!userId) {\r\n\t\t\t\tthis.props.history.push(\"/Login\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!userId){\r\n\t\t\tthrow new Error(\"ID should exsists in URI params or in state ('authorizedUserId')\");\r\n\t\t} else  {\r\n\t\t\tthis.props.getUserProfile(userId);\r\n\t\t\tthis.props.getStatus(userId);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.refreshProfile();\r\n\t}\r\n\tcomponentDidUpdate(prevProps: PropsType, prevState: PropsType){\r\n\t\tif (this.props.match.params.userId !== prevProps.match.params.userId)\r\n\t\tthis.refreshProfile()\r\n\t}\r\n\tcomponentWillUnmount(): void {\r\n\t}\r\n\trender() {\r\n\t\t//console.log(\"render profile\")\r\n\t\treturn (\r\n\t\t\t<Profile {...this.props}\r\n\t\t\tisOwner={!this.props.match.params.userId}\r\n\t\t\tprofile={this.props.profile} \r\n\t\t\tstatus={this.props.status}\r\n\t\t\tupdateStatus={this.props.updateStatus}\r\n\t\t\tsavePhoto={this.props.savePhoto}/>\r\n\t\t)\r\n\t}\r\n}\r\nlet mapStateToProps = (state: appStateType) => {\r\n\t//console.log('mapStateToProps Profile')\r\n\treturn ({\r\n\t\tprofile: state.profilePage.profile,\r\n\t\tstatus: state.profilePage.status,\r\n\t\tauthorizedUserId: state.auth.userId,\r\n\t\tisAuth: state.auth.isAuth\r\n\t})\r\n\t\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n\tconnect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n\twithRouter,\r\n\twithAuthRedirect\r\n)(ProfileContainer);\r\n//types \r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n\tgetUserProfile: (userId: number) => void, \r\n\tgetStatus: (status: number) => void, \r\n\tupdateStatus: (status: string) => void, \r\n\tsavePhoto: (file: File) => void, \r\n\tsaveProfile: (profile: profileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n\tuserId: string,\r\n}\r\ntype PropsType = MapPropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n"],"sourceRoot":""}